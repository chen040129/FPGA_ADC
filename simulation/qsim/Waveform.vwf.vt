// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2024 13:23:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          uart
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module uart_vlg_vec_tst();
// constants                                           
// general purpose registers
reg RST_clk;
reg RST_n;
reg [11:0] ad;
reg rx_data;
// wires                                               
wire Ram_read_data;
wire ad_clk;
wire clk;
wire clk_out;
wire [7:0] out;
wire uart_busy;
wire uart_tx_data;

// assign statements (if any)                          
uart i1 (
// port map - connection between master ports and signals/registers   
	.RST_clk(RST_clk),
	.RST_n(RST_n),
	.Ram_read_data(Ram_read_data),
	.ad(ad),
	.ad_clk(ad_clk),
	.clk(clk),
	.clk_out(clk_out),
	.out(out),
	.rx_data(rx_data),
	.uart_busy(uart_busy),
	.uart_tx_data(uart_tx_data)
);
initial 
begin 
#1000000 $finish;
end 

// RST_clk
always
begin
	RST_clk = 1'b0;
	RST_clk = #2500 1'b1;
	#2500;
end 

// RST_n
initial
begin
	RST_n = 1'b0;
	RST_n = #160000 1'b1;
end 
// ad[ 11 ]
initial
begin
	ad[11] = 1'b0;
end 
// ad[ 10 ]
initial
begin
	ad[10] = 1'b0;
end 
// ad[ 9 ]
initial
begin
	ad[9] = 1'b0;
end 
// ad[ 8 ]
initial
begin
	ad[8] = 1'b0;
end 
// ad[ 7 ]
initial
begin
	ad[7] = 1'b0;
end 
// ad[ 6 ]
initial
begin
	ad[6] = 1'b0;
	ad[6] = #640000 1'b1;
end 
// ad[ 5 ]
initial
begin
	ad[5] = 1'b0;
	ad[5] = #320000 1'b1;
	ad[5] = #320000 1'b0;
	ad[5] = #320000 1'b1;
end 
// ad[ 4 ]
initial
begin
	repeat(3)
	begin
		ad[4] = 1'b0;
		ad[4] = #160000 1'b1;
		# 160000;
	end
	ad[4] = 1'b0;
end 
// ad[ 3 ]
initial
begin
	repeat(6)
	begin
		ad[3] = 1'b0;
		ad[3] = #80000 1'b1;
		# 80000;
	end
	ad[3] = 1'b0;
end 
// ad[ 2 ]
initial
begin
	repeat(12)
	begin
		ad[2] = 1'b0;
		ad[2] = #40000 1'b1;
		# 40000;
	end
	ad[2] = 1'b0;
end 
// ad[ 1 ]
always
begin
	ad[1] = 1'b0;
	ad[1] = #20000 1'b1;
	#20000;
end 
// ad[ 0 ]
always
begin
	ad[0] = 1'b0;
	ad[0] = #10000 1'b1;
	#10000;
end 

// rx_data
initial
begin
	rx_data = 1'b0;
end 
endmodule

